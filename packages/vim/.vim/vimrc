" Vim config file for gbp

" Initialization {{{
"
" The following is mostly taken from Damian Conway's vimrc:
"   https://github.com/thoughtstream/Damian-Conway-s-Vim-Setup/blob/master/.vimrca
"
" with some help from that of Simon Mutch:
"   https://github.com/smutch/vim-config

" Avoid modeline vulnerability {{{
set nomodeline

" Set-up secure modeline as per: https://blog.firosolutions.com/exploits/vimsploit/
let g:secure_modelines_verbose = 0
let g:secure_modelines_modelines = 15
" }}}

" Change leader mapping {{{
let mapleader = ' '
" }}}

" Terminal colours & encoding {{{

" Set colour usage
set t_Co=256
"if exists('&termguicolors')
"    set termguicolors
"endif

" Encoding
setglobal termencoding=utf-8 fileencodings=
scriptencoding utf-8
set encoding=utf-8

autocmd BufNewFile,BufRead  *   try
autocmd BufNewFile,BufRead  *       set encoding=utf-8
autocmd BufNewFile,BufRead  *   endtry

" Needed for Gnu Screen
if (match($TERM, "screen")!=-1) && !exists('&termguicolors')
    set term=screen-256color
endif
" }}}

" Query system name and OS type {{{
let os = substitute(system('uname'), "\n", "", "")
let hostname = substitute(system('hostname'), '\n', '', '')
" }}}

" System and OS dependencies {{{
if os == "Darwin"
else
    let g:cmake_opts = ''
end
" }}}

" Determine file type {{{
if has('filetype')
    filetype plugin indent on
else
    augroup FiletypeInference
        autocmd!
        autocmd BufNewFile,BufRead  *.t      setfiletype perl
        autocmd BufNewFile,BufRead  *.pod    setfiletype pod
        autocmd BufNewFile,BufRead  *.itn    setfiletype itn
        autocmd BufNewFile,BufRead  *        call s:infer_filetype()
    augroup END
    
    function! s:infer_filetype ()
        for line in getline(1,20)
            if line =~ '^\s*use\s*v\?5\.\S\+\s*;\s*$'
                setfiletype perl
                return
            elseif line =~ '^\s*use\s*v\?6\s*;\s*$'
                setfiletype perl6
                return
            endif
        endfor
    endfunction
endif
" }}}

" Enable marker folding for vimrc {{{
" (secure modeline takes care of other cases)
set foldmethod=marker
" }}}

" Enable Nmap command for documented mappings {{{
runtime plugin/documap.vim
" }}}

" Ensure autodoc'd plugins are supported {{{
runtime plugin/_autodoc.vim
" }}}
" }}}

" ### OPTIONS ### {{{
set title           "Show filename in titlebar of window
set titleold=
set title titlestring=
"set nomore          "Don't page long listings
set cpoptions-=a    "Don't set # after a :read
set autowrite       "Save buffer automatically when changing files
set noswapfile
set autoread        "Always reload buffer when external changes detected
"           +--Disable hlsearch while loading viminfo
"           | +--Remember marks for last 500 files
"           | |    +--Remember up to 10000 lines in each register
"           | |    |      +--Remember up to 1MB in each register
"           | |    |      |     +--Remember last 1000 search patterns
"           | |    |      |     |     +---Remember last 1000 commands
"           | |    |      |     |     |
"           v v    v      v     v     v
set viminfo=h,'500,<10000,s1000,/1000,:1000
set backspace=indent,eol,start      "BS past autoindents, line boundaries,
                                    "     and even the start of insertion
set fileformats=unix,mac,dos        "Handle Mac and DOS line-endings
                                    "but prefer Unix endings
"Turn on wildmenu:
"   First tab: longest match, list in the statusbar.
"   Following tabs: cycle through matches
set wildmode=list:longest,full       " Show list of completions
                                     "   and complete as much as possible,
                                     "   then iterate full completions
set wildmenu wildmode=longest:full,full
set wildmenu                         " show list instead of just completing
set noshowmode                       " Suppress mode change messages
set updatetime=2000                  " idleness" is 2 sec
set scrolloff=20                      " Scroll when X lines from top/bottom
set visualbell t_vb=                 " Turn off visual beep
set laststatus=2                     " Always display a status line
set cmdheight=1                      " Command line height
set hlsearch                         " Highlight searches
" set history=500                      " Store a ton of history (default is 20)
set hidden                           " Don't unload a buffer when abandoning it
set clipboard=unnamed                " To work in tmux
set spelllang=en_au                  " Australian spelling
set secure                           " Secure mode for reading vimrc, exrc files etc. in current dir
set exrc                             " Allow the use of folder dependent settings
set autoindent                       " Autoindent
set nosmartindent                    " Turning this off; messes with python comment indents.
set wrap                             " Wrap lines
set linebreak                        " Wrap at breaks
set textwidth=0 wrapmargin=0
set display=lastline
set formatoptions+=l                 " Dont mess with the wrapping of existing lines
set expandtab tabstop=4 shiftwidth=4 " Tab spacing
set incsearch                        " Highlight matches as you type
set showmatch                        " Show matching paren
" set infercase                        " Adjust completions to match case
set gdefault                         " g flag on sed subs automatically
set directory=$GBP_HOME/.cache/vim/
set backupdir=$GBP_HOME/.cache/vim/bkp
set listchars=tab:▸\ ,eol:↵,trail:·  " Set hidden characters
set number                           " Show line numbers
set relativenumber                   " Show relative line numbers
set mouse=a      " enable mouse for all modes settings.  Also avoids copying line numbers:
                 " https://stackoverflow.com/questions/5728259/how-to-clear-the-line-number-in-vim-when-copying

" Persistant undo
if has('persistent_undo')
    set undodir=$GBP_HOME/.cache/vim/undo/  " Save all undo files in a single location (less messy, more risky)...
    set undolevels=1000                     " Save a lot of back-history...
    set undofile                            " Actually switch on persistent undo
endif

if has('syntax')
    syntax on
endif

"" Disabled options
""set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)
""set complete-=t                             " I don't use tags, so no need to search for them
""set updatecount=50                          " Save buffer every X chars typed
""set timeout timeoutlen=300 ttimeoutlen=300  " Keycodes and maps timeout in 3/10 sec...
""set cursorline                              " highlight current line
""set shellcmdflag=-ic                        " Use an interactive shell to allow use of command line aliases
""let g:c_syntax_for_h = 1                    " Use c-syntax
"
"set wildignore+=*.o,*.obj,*.pyc,
"            \*.aux,*.blg,*.fls,*.blg,*.fdb_latexmk,*.latexmain,.DS_Store,
"            \Session.vim,Project.vim,tags,.tags,.sconsign.dblite,.ccls-cache
"
"" Set suffixes that are ignored with multiple match
"set suffixes=.bak,~,.o,.info,.swp,.obj

if has("nvim") && exists("+pumblend")
    set pumblend=20  " opacity for popupmenu
endif

"if exists('&inccommand')
"  set inccommand=nosplit " Live substitution
"endif
" }}}

" ### PLUGINS ### {{{
" Load plugins {{{

" Install vim-plug automatically if absent
if has('win32') && empty(glob('~/vimfiles/autoload/plug.vim'))
    echohl Error
    echo "\nVim-plug has not been installed. Installing now ..."
    echohl None
    finish
elseif !has('win32') && empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Check for fzf
if empty(glob('~/.fzf'))
    echohl Error
    echo "\nfzf has not been installed.  From a shell, please run the following:\n\n   cd $GBP_HOME/3rd_Party\n   make fzf\n\nand try again."
    echohl None
    finish
endif

call plug#begin()

    " TODO: Checkout these plugins:
    "   telescope
    "   treesitter
    "   undotree
    "   fugitive
    "   neovim/nvim-lspconfig
    "   lsp-saga (glepnir/lspsaga.nvim)
    "   nvim-treesitter/nvim-treesitter

    " Healthy defaults
    Plug 'tpope/vim-sensible'

    " Aesthetics
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " Add Molokai colorscheme.  Needs to be chosen later.
    Plug 'tomasr/molokai'

    " Add support for editorconfig files (see http://editorconfig.org/ &
    " https://github.com/editorconfig/editorconfig-vim)
    Plug 'editorconfig/editorconfig-vim'

    " Make terminal vim and tmux work better together"
    " https://github.com/tmux-plugins/vim-tmux-focus-events"
    Plug 'tmux-plugins/vim-tmux-focus-events'

    " Motion
    Plug 'tpope/vim-rsi'
    Plug 'tpope/vim-surround'
    " Plug 'justinmk/vim-sneak'

    " Editing
    Plug 'jiangmiao/auto-pairs'
    Plug 'scrooloose/nerdcommenter'

    " Snipits
    Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

    " IDE-like things
    Plug 'chrisbra/vim-diff-enhanced'
    Plug 'tpope/vim-vinegar'
    Plug 'majutsushi/tagbar'
    Plug 'airblade/vim-gitgutter'
    Plug 'rhysd/git-messenger.vim'

    " Nerdtree stuff
    Plug 'preservim/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'ryanoasis/vim-devicons'
    Plug 'PhilRunninger/nerdtree-buffer-ops'

    " Fuzzy searching (fzf etc.)
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } | Plug 'junegunn/fzf.vim'
    Plug 'mileszs/ack.vim'

    " Linting
    Plug 'w0rp/ale'

    " Grammar checkers, etc.
    " Plug 'reedes/vim-wordy', { 'for': ['markdown', 'tex', 'latex'] }
    " Plug 'davidbeckingsale/writegood.vim', { 'for': ['tex', 'markdown', 'latex'] }

    " Zen-mode
    Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }

    " File-sepcific stuff
    Plug 'sheerun/vim-polyglot'
    Plug 'Glench/Vim-Jinja2-Syntax', { 'for': 'html' }
    Plug 'vim-python/python-syntax', { 'for': 'python' }
    Plug 'Vimjas/vim-python-pep8-indent', { 'for': 'python'}
    Plug 'davidhalter/jedi-vim', { 'for': 'python' }
    Plug 'tmhedberg/SimpylFold', { 'for': 'python' }

    " Smooth scrolling
    Plug 'yuttie/comfortable-motion.vim'

    " CoC for LSP support
    Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
    Plug 'neoclide/coc-snippets', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-prettier', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-eslint', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-tslint', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-css', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-lists', {'do': 'yarn install --frozen-lockfile'} " mru and stuff
    Plug 'neoclide/coc-highlight', {'do': 'yarn install --frozen-lockfile'} " color highlighting

    " Save session information
    Plug 'tpope/vim-obsession'

    " Automatic detection of indenting
    Plug 'tpope/vim-sleuth'
call plug#end()
" }}}

" Plugin Settings {{{

" ALE {{{
let g:ale_set_highlights = 1
let g:ale_lint_on_text_changed = 'normal'
let g:ale_linters = {
\   'python': ['flake8'],
\   'c' : ['clangtidy', 'cppcheck', 'clang'],
\   'cpp' : ['clangtidy', 'cppcheck'],
\   'cuda': ['cppcheck']
\}
" \   'c' : ['cppcheck', 'ccls', 'clangtidy'],
" \   'cpp' : ['cppcheck', 'ccls'],

let g:ale_fixers = {
\   'c': ['clang-format']
\}
if (hostname =~ 'farnarkle') || (hostname =~ 'swin.edu.au')
    let g:ale_cpp_cppcheck_executable='/fred/oz013/smutch/3rd_party/cppcheck/bin/cppcheck'
    let g:ale_c_cppcheck_executable=g:ale_cpp_cppcheck_executable
    let g:ale_cuda_cppcheck_executable=g:ale_cpp_cppcheck_executable
    " let g:ale_cpp_clang_executable="/home/smutch/.conda/envs/gpu_test/bin/clang++"
    " let g:ale_c_clang_executable="/home/smutch/.conda/envs/gpu_test/bin/clang"
    let g:ale_c_ccls_executable='/home/smutch/freddos/meraxes/3rd_party/ccls/bin/ccls'
    " call remove(g:ale_linters['c'], 1, 2)
endif

let g:ale_c_build_dir_names=['build', 'cmake-build-debug']
" let g:ale_cpp_cppcheck_options="--project=compile_commands.json --enable=style"
let g:ale_c_clangtidy_checks = ['-*', 'google-*', '-google-runtime-references', '-google-readability-braces-around-statements', 'modernize-*', 'mpi-*', 'performance-*', 'clang-analyzer-*', 'bugprone-*']
let g:ale_cpp_clangtidy_checks = g:ale_c_clangtidy_checks + ['cppcoreguidelines-*', '-cppcoreguidelines-pro-*']
let g:ale_c_clangformat_options = '-style=WebKit'
let g:ale_python_flake8_options = '--ignore=E501,E402,E226,E203,W503'
let g:ale_tex_chktex_options = '-I -n 35'
let g:ale_sign_error = ''
let g:ale_sign_warning = ''
let g:ale_sign_info = ''
let g:ale_sign_style_error = ''
let g:ale_sign_style_warning = ''

let g:ale_virtualtext_cursor = 1
let g:ale_virtualtext_prefix = '» '

nmap <leader>ar <Plug>(ale_find_references)
nmap <leader>af <Plug>(ale_fix)
nmap <leader>ad <Plug>(ale_go_to_definition)
nmap <leader>aD <Plug>(ale_go_to_definition_in_split)
nmap <leader>at <Plug>(ale_go_to_type_definition)
nmap <leader>aT <Plug>(ale_go_to_type_definition_in_split)
nmap <leader>ak <Plug>(ale_hover)
nmap <leader>al <Plug>(ale_lint)
" Map movement through errors without wrapping.
nmap <silent> <leader>a[ <Plug>(ale_previous)
nmap <silent> <leader>a] <Plug>(ale_next)

" OR map keys to use wrapping.
nmap <silent> <leader>a{ <Plug>(ale_previous_wrap)
nmap <silent> <leader>a} <Plug>(ale_next_wrap)
" }}}

" NERDTree {{{
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

" }}}

" airline {{{
"let g:airline#extensions#tmuxline#enabled = 0
"let g:airline#extensions#tabline#enabled = 0
"let g:airline_powerline_fonts = 1
"let g:airline_left_sep=''
"let g:airline_right_sep=''
"
"call airline#parts#define_function('winnum', 'WindowNumber')
"function! MyPlugin(...)
"    let s:my_part = airline#section#create(['winnum'])
"    " let w:airline_section_x = get(w:, 'airline_section_x', g:airline_section_x) . g:airline_right_sep . ' [' . s:my_part . ']'
"    let w:airline_section_x = get(w:, 'airline_section_x', g:airline_section_x) . ' [' . s:my_part . ']'
"endfunction
"silent call airline#add_statusline_func('MyPlugin')
" }}}

" float-preview {{{
let g:float_preview#docked = 0
" }}}

" fzf etc. {{{
"" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" Use Ripgrep
if executable('rg')
  " Options include:
  " --vimgrep -> Needed to parse the rg response properly for ack.vim
  " --type-not sql -> Avoid huge sql file dumps as it slows down the search
  " --smart-case -> Search case insensitive if all lowercase pattern, Search case sensitively otherwise
  let g:ackprg = 'rg --vimgrep --type-not sql --smart-case'
" Use Silver Searcher
elseif executable('ag')
  let g:ackprg = 'ag --nogroup --nocolor --column'
else
  " Grep will sometimes skip displaying the file name if you
  " search in a singe file. Set grep
  " program to always generate a file-name.
  set grepprg=grep\ -nHRI\ $*\ .
endif

" Auto close the Quickfix list after pressing '<enter>' on a list item
let g:ack_autoclose = 1

" Any empty ack search will search for the work the cursor is on
let g:ack_use_cword_for_empty_search = 1

" Don't jump to first match
cnoreabbrev Ack Ack!

" Maps <leader>/ so we're ready to type the search keyword
nnoremap <Leader>/ :Ack!<Space>

" Navigate quickfix list with ease
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]q :cnext<CR>

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-o': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
" - window (nvim only)
let g:fzf_layout = { 'up': '~40%' }

" Customize fzf colors to match my color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" For Commits and BCommits to customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" Mappings and commands
nmap <leader>fm <plug>(fzf-maps-n)
xmap <leader>fm <plug>(fzf-maps-x)
omap <leader>fm <plug>(fzf-maps-o)

" redefine some commands to use the preview feature
" command! -bang -nargs=* -complete=file Files call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
" command! -bang -nargs=* -complete=dir Ag call fzf#vim#ag(<q-args>, fzf#vim#with_preview(), <bang>0)
" command! -bang History call fzf#vim#history(fzf#vim#with_preview(), <bang>0)

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>ff :Files %:p:h<CR>
nnoremap <leader>fhf :History<CR>
nnoremap <leader>fh: :History:<CR>
nnoremap <leader>fh/ :History/<CR>
nnoremap <leader>f: :Commands<CR>
nnoremap <leader>fw :Windows<CR>
nnoremap <leader>fs :Snippets<CR>
nnoremap <leader>f? :Helptags<CR>
nnoremap <leader>fg :GitFiles?<CR>
nnoremap <leader>fl :Lines<CR>
nnoremap <leader>fL :BLines<CR>
nnoremap <leader>ft :Tags<CR>
nnoremap <leader>fT :BTags<CR>
nnoremap <leader>f/ :Rg<CR>

imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)
" project files
function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! -bang FZFProjectFiles call fzf#vim#files(s:find_git_root(), fzf#vim#with_preview(), <bang>0)
" command! -bang FZFProjectFiles call fzf#vim#files(s:find_git_root(), <bang>0)
nnoremap <leader>fp :FZFProjectFiles<CR>
" }}}

" gitgutter {{{
let g:gitgutter_map_keys = 0
autocmd BufNewFile,BufRead /Volumes/* let g:gitgutter_enabled = 0
nnoremap ]h :GitGutterNextHunk<CR>
nnoremap [h :GitGutterPrevHunk<CR>
nnoremap ghs :GitGutterStageHunk<CR>
nnoremap ghr :GitGutterRevertHunk<CR>
nnoremap ghp :GitGutterPreviewHunk<CR>
let g:gitgutter_realtime = 0
let g:gitgutter_sign_added = '┃'
let g:gitgutter_sign_modified = '┃'
let g:gitgutter_sign_removed = '┃'
let g:gitgutter_sign_modified_removed = '┃'
" }}}

" goyo {{{
let g:goyo_width = 82
" }}}

" {{{ CoC

let g:coc_config_home = $GBP_HOME . '/.vim'

" The following was taken from the CoC website:
" https://github.com/neoclide/coc.nvim

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" Long update times (default is 4000ms) leads to noticable delays and a bad
" experience for diagnostic messages
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Set icons
let g:coc_status_error_sign = ''
let g:coc_status_warning_sign = ''

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" The following was taken from here:
" https://github.com/rstacruz/vim-coc-settings/blob/master/after/plugin/coc.vim
inoremap <silent><expr> <c-space> coc#refresh()

" gd - go to definition of word under cursor
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)

" gi - go to implementation
nmap <silent> gi <Plug>(coc-implementation)

" gr - find references
nmap <silent> gr <Plug>(coc-references)

" gh - get hint on whatever's under the cursor
nnoremap <silent> K :call <SID>show_documentation()<CR>
nnoremap <silent> gh :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction


" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>
nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>

" List errors
nnoremap <silent> <leader>cl  :<C-u>CocList locationlist<cr>

" list commands available in tsserver (and others)
nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>

" restart when tsserver gets wonky
nnoremap <silent> <leader>cR  :<C-u>CocRestart<CR>

" view all errors
nnoremap <silent> <leader>cl  :<C-u>CocList locationlist<CR>

" manage extensions
nnoremap <silent> <leader>cx  :<C-u>CocList extensions<cr>

" rename the current word in the cursor
nmap <leader>cr  <Plug>(coc-rename)
nmap <leader>cf  <Plug>(coc-format-selected)
vmap <leader>cf  <Plug>(coc-format-selected)

" run code actions
vmap <leader>ca  <Plug>(coc-codeaction-selected)
nmap <leader>ca  <Plug>(coc-codeaction-selected)

"}}}

" jedi {{{

" ---
" UNCOMMENT TO DISABLE
" let g:jedi#auto_initialization = 0
" ---

" These two are required for neocomplete
" let g:jedi#completions_enabled = 0
" let g:jedi#auto_vim_configuration = 0

" Ensure conda paths are being used (see https://github.com/cjrh/vim-conda/issues/15)
" let s:custom_sys_paths = system('~/miniconda3/bin/python -c "import sys; print(sys.path)"')
" py3 << EOF
" import vim, sys, ast
" sys.path.extend(ast.literal_eval(vim.eval("s:custom_sys_paths")))
" EOF

let g:jedi#force_py_version = 3
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = 2  "May be too slow...
let g:jedi#auto_close_doc = 0
autocmd FileType python let b:did_ftplugin = 1
let g:jedi#goto_stubs_command = '<localleader>s'
let g:jedi#goto_assignments_command = '<localleader>g'
let g:jedi#goto_command = '<localleader>d'
let g:jedi#rename_command = '<localleader>r'
let g:jedi#usages_command = '<localleader>u'

" move documentation to the right if the window is big enough
" au BufAdd * if bufname(expand('<afile>')) ==# "'__doc__'" | silent! wincmd L | endif

" close the documentation window
autocmd FileType python nnoremap <buffer> <localleader>D :exec bufwinnr('__doc__') . "wincmd c"<CR>
" }}}

" matchit {{{
" Match angle brackets...
set matchpairs+=<:>,«:»,｢:｣
if !exists('g:loaded_matchit')
  runtime macros/matchit.vim
endif
" }}}

" nerd_commenter {{{
let g:NERDCustomDelimiters = {
            \ 'scons': { 'left': '#' },
            \ 'jinja': { 'left': '<!--', 'right': '-->' },
            \ }
let g:NERDSpaceDelims = 1
let g:NERDAltDelims_c = 1
map <leader><leader> <plug>NERDCommenterToggle
nnoremap <leader>cp yy:<C-u>call NERDComment('n', 'comment')<CR>p
vnoremap <leader>cp ygv:<C-u>call NERDComment('x', 'comment')<CR>`>p
" }}}

" polyglot {{{
 let g:polyglot_disabled = ['tex', 'latex', 'python']
" }}}

" sneak {{{
"let g:sneak#label = 1
"let g:sneak#label = 1
"let g:sneak#s_next = 1
"
""replace 'f' and 't' with 1-char Sneak
"nmap f <Plug>Sneak_f
"xmap f <Plug>Sneak_f
"omap f <Plug>Sneak_f
"nmap F <Plug>Sneak_F
"xmap F <Plug>Sneak_F
"omap F <Plug>Sneak_F
"nmap t <Plug>Sneak_t
"xmap t <Plug>Sneak_t
"omap t <Plug>Sneak_t
"nmap T <Plug>Sneak_T
"xmap T <Plug>Sneak_T
"omap T <Plug>Sneak_T
" }}}

" tagbar {{{
nnoremap <leader>T :TagbarToggle<CR>
" }}}

" Ultisnips {{{
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsExpandTrigger = '<C-k>'
let g:UltiSnipsJumpForwardTrigger = '<C-k>'
let g:UltiSnipsJumpBackwardTrigger = '<C-j>'
let g:ultisnips_python_style = 'numpy'
let g:AutoPairsMapCR=0
inoremap <silent> <Plug>(MyCR) <CR><C-R>=AutoPairsReturn()<CR>
" }}}

" comfortable-motion {{{
let g:comfortable_motion_no_default_key_mappings = 1
let g:comfortable_motion_impulse_multiplier = 1  " Feel free to increase/decrease this value.

nnoremap <silent> <C-j> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
nnoremap <silent> <C-k> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>
" }}}

" turn off arrow keys {{{
nnoremap <left>  <nop>
nnoremap <right> <nop>
nnoremap <down>  <nop>
nnoremap <up>    <nop>
vnoremap <left>  <nop>
vnoremap <right> <nop>
vnoremap <down>  <nop>
vnoremap <up>    <nop>
" }}}

" }}}
"}}}

" Set color scheme(s) {{{
try
    colorscheme molokai
    let g:airline_theme='molokai'
catch /^Vim\%((\a\+)\)\=:E185/
    echom "Colourscheme not found.  Perhaps plugins have not been installed?  Try running :PlugInstall"
endtry

" Change visual highlighting colour
hi Visual cterm=bold ctermbg=Grey ctermfg=NONE
" }}}

" Assorted Leader Commands {{{
  nnoremap <leader><esc> :bd<CR>
  nnoremap <silent> <ctrl>Y 0vg_y " Make sure yank-line does not include the <CR>
" }}}

" Custom features {{{
" Edit and auto-update this config file and plugins {{{
augroup  imReload
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
    autocmd BufWritePost $GBP_HOME/.vim/vimrc source $MYVIMRC
augroup END
nmap <silent> <leader>ve :next $MYVIMRC<CR>
nmap <silent> <leader>vr :source $MYVIMRC<CR>
" }}

" Remap U to <ctrl-r> (Redo) {{{
nnoremap U <C-R>
" }}}

" Move and auto-format selected text in visual mode {{{
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
" }}}

" Prefer vertical orientation when using :diffsplit {{{
set diffopt+=vertical
" }}}

" Goto last location in non-empty files {{{
autocmd BufReadPost *  if line("'\"") > 1 && line("'\"") <= line("$")
                   \|     exe "normal! g`\""
                   \|  endif
" }}}

" Smarter search behaviour {{{

" Absolute direction for n and N...
nnoremap  <silent><expr> n  'Nn'[v:searchforward] . ":call HLNext()\<CR>"
nnoremap  <silent><expr> N  'nN'[v:searchforward] . ":call HLNext()\<CR>"

"Delete in normal mode to switch off highlighting till next search and clear messages...
Nmap <silent> <BS> [Cancel highlighting]  :call HLNextOff() <BAR> :nohlsearch <CR>

"Double-delete to remove trailing whitespace...
function! TrimTrailingWS ()
    if search('\s\+$', 'cnw')
        :%s/\s\+$//g
    endif
endfunction
Nmap <silent> <BS><BS>  [Remove trailing whitespace] mz:call TrimTrailingWS()<CR>`z

" Improved search mapping to replace :%s/.../.../g {{{
Nmap S  [Shortcut for :s///g]  :%s//g<LEFT><LEFT>
xmap S                         :s//g<LEFT><LEFT>

Nmap <expr> M  [Shortcut for :s/<last match>//g]  ':%s/' . @/ . '//g<LEFT><LEFT>'
xmap <expr> M                                     ':s/' . @/ . '//g<LEFT><LEFT>'
" }}}

" }}}

" Smart wrapping {{{

" No smartwrapping in any of these files...
"let g:SW_IGNORE_FILES = '.vimrc,*.vim,*.pl,*.pm,**/bin/**'

" set comments-=s1:/*,mb:*,ex:*/      "Don't recognize C comments
" set comments-=:XCOMM                "Don't recognize lmake comments
" set comments-=:%                    "Don't recognize PostScript comments
" set comments-=:#                    "Don't recognize Perl/shell comments
" set comments+=fb:*                  "Star-space is a bullet
" set comments+=fb:-                  "Dash-space is a bullets
set formatoptions-=cro
set formatoptions+=j                  " Remove comment introducers when joining comment lines
set wrapmargin=2                      "Wrap 2 characters from the edge of the window
"set cinwords = ""                    "But not for C-like keywords
set cinoptions+=#1
set cinkeys-=0#
" }}}

" Smart indent {{{
set autoindent             " Retain indentation on next line
set smartindent            " Turn on autoindenting of blocks
let g:vim_indent_cont = 0  " No magic shifts on Vim line continuations

"And no shift magic on comments...
function! ShiftLine() range
    set nosmartindent
    exec "normal! " . v:count . ">>"
    set smartindent
    silent! call repeat#set( "\<Plug>ShiftLine" )
endfunction
nmap <silent>  >>  <Plug>ShiftLine
nnoremap <Plug>ShiftLine :call ShiftLine()<CR>
" }}}

" Automatically create tmp directories {{{
function! InitBackupDir()
  if exists('*mkdir')
    if !isdirectory(&directory)
      call mkdir(&directory)
    endif
    if !isdirectory(&backupdir)
      call mkdir(&backupdir)
    endif
    if !isdirectory(&undodir)
      call mkdir(&undodir)
    endif
  endif
  let l:missing_dir = 0
  if !isdirectory(&directory)
    let l:missing_dir = 1
  endif
  if !isdirectory(&backupdir)
    let l:missing_dir = 1
  endif
  if !isdirectory(&undodir)
    let l:missing_dir = 1
  endif
  if l:missing_dir
    echo 'Warning: Unable to create scratch directories:' &directory ',' &backupdir 'and' &undodir
    echo 'Try: mkdir -p' &directory
    echo 'and: mkdir -p' &backupdir
    echo 'and: mkdir -p' &undodir
    set directory=.
    set backupdir=.
    set undodir=.
  endif
endfunction
call InitBackupDir()
" }}}

" }}}
