#!/bin/bash
# vim:syntax=sh
# vim:filetype=sh

# Decide what sort of system we're on
if [ -f /bin/uname ] || [ -f /usr/bin/uname ]; then
  export GBP_OS=`uname`
  if [ $GBP_OS = 'Darwin' ]; then
     export GBP_OS='Mac'
  elif [ $GBP_OS = 'Linux' ]; then
     export GBP_OS='linux'
  fi
else
  echo Unknown OS type: ${GBP_OS}.
  export GBP_OS='unknown'
fi

# Set UTF encoding locale.  Needed by 'Click' for instance.
if [[ -z "$LANG" ]]; then
    export LANG='en_AU.UTF-8'
    export LANGUAGE=en_AU.UTF-8
fi
export LC_COLLATE=en_AU.UTF-8
export LC_CTYPE=en_AU.UTF-8
export LC_MESSAGES=en_AU.UTF-8
export LC_MONETARY=en_AU.UTF-8
export LC_NUMERIC=en_AU.UTF-8
export LC_TIME=en_AU.UTF-8
export LC_ALL=en_AU.UTF-8
export LESSCHARSET=utf-8

# Set system-specific stuff, first based on HOSTNAME
export GBP_HOSTNAME=`hostname`
export GBP_QUEUE_TYPE='NONE'
export GBP_CUDA_ENABLED='NO'
if [ -n $GBP_HOSTNAME ]; then
  if [ $GBP_OS = 'Mac' ]; then
    export GBP_QUEUE_TYPE='NONE'

    # Make sure ._* files don't get added to tar files, etc.
    export COPYFILE_DISABLE=1
    if [ -f "/usr/local/modules-tcl/init/sh" ]; then
      source /usr/local/modules-tcl/init/sh
    fi

    # Add LLVM/Clang to the path
    add2path -q /usr/local/opt/llvm/bin

    # Add MacTex to the path
    add2path -q /usr/local/texlive/latest/bin/x86_64-darwin

    # Add mySQL to the path
    export MYSQL_PATH=/usr/local/Cellar/mysql/5.7.19  
    add2path -b -q $MYSQL_PATH/bin

    # Set paths for Homebrew.  Add the Homebrew direcory and 
    # place the Homebrew bin directory before system directory.
    # This ensures that the Homebrew installs override all others.
    add2path -q /usr/local/bin
    add2path -q /usr/local/sbin

    export LIBRARY_PATH="${GBP_HOME}/my_code/lib:${GBP_HOME}/3rd_Party/lib:$LIBRARY_PATH"

    # Set installation dir of Ananaconda
    export GBP_CONDA_PATH="${GBP_HOME}/miniconda3/"

  elif [[ $GBP_HOSTNAME = farnarkle* ]] || [[ $GBP_HOSTNAME = data-mover* ]] || [[ $GBP_HOSTNAME = john* ]] || [[ $GBP_HOSTNAME = bryan* ]] ; then
    export GBP_QUEUE_TYPE='SLURM'
    export GBP_CUDA_ENABLED='YES'
    if [ ! -z ${EBROOTANACONDA3+x} ];then
       export GBP_CONDA_PATH=${EBROOTANACONDA3}
    fi
  elif [ $GBP_HOSTNAME = 'g2.hpc.swin.edu.au' ]; then
    export GBP_QUEUE_TYPE='PBS'
  elif [[ $GBP_HOSTNAME = sstar* ]]; then
    export GBP_QUEUE_TYPE='NONE'
  elif [ $GBP_HOSTNAME = 'ldas-pcdev1' ]; then
    export GBP_QUEUE_TYPE='NONE'
  # This case is needed because CI tests break if bash returns text
  elif [ "$GBPENV_TEST" = 1 ]; then
    export GBP_QUEUE_TYPE='NONE'
  else
      echo 'There is no default configuration in .bashrc.system for this system ('$GBP_HOSTNAME').  Assigning defaults.'
  fi
else
  echo Could not identify hostname in .bashrc.system for this system.  Assigning defaults.
fi

# LIGO Data Grid configuration
pcdev1=gregory.poole@ldas-pcdev1.ligo.caltech.edu
GLOBUS_LOCATION=/opt/ldg
export GLOBUS_LOCATION
if [ -f ${GLOBUS_LOCATION}/etc/globus-user-env.sh ] ; then
	. ${GLOBUS_LOCATION}/etc/globus-user-env.sh
fi
go_LDG.proxy () { ligo-proxy-init albert.einstein; }
go_LDG () { gsissh -YC $pcdev1 ; }

# Add '3rd_Party' and 'my_code' directories to paths
add2path -q ${GBP_HOME}/my_code/bin
add2path -q ${GBP_HOME}/3rd_Party/bin
export LD_LIBRARY_PATH="${GBP_HOME}/my_code/lib:${GBP_HOME}/3rd_Party/lib:${LD_LIBRARY_PATH}"
export INCLUDE="${GBP_HOME}/my_code/include:${GBP_HOME}/3rd_Party/include:${INCLUDE}"
export CPATH="${GBP_HOME}/my_code/include:${GBP_HOME}/3rd_Party/include:${CPATH}"
export PKG_CONFIG_PATH=${GBP_HOME}/3rd_Party/lib/pkgconfig:${PKG_CONFIG_PATH}

# If using a custom-installed gcc, then 3rd party libraries will end-up in the following 
# path ... prepend it to make sure it is preferred over a system install
export LD_LIBRARY_PATH="${GBP_HOME}/3rd_Party/lib64:${LD_LIBRARY_PATH}"

# Add ~/bin to PATH
add2path -q ${GBP_HOME}/bin

# Set-up Anaconda
if [ -f ${GBP_CONDA_PATH}/etc/profile.d/conda.sh ]; then
    source ${GBP_CONDA_PATH}/etc/profile.d/conda.sh

    # Set-up some scripts so that Tox can find all the versions of 
    # python we have installed under Anaconda.  This assumes that there is
    # a conda environment named pythonX.Y for every X.Y version of python
    # we may want to run tox against.
    #
    # To create a new conda environment for python version X.Y, run this:
    #    conda create --name pythonX.Y python=X.Y
    #
    # Also, you might have to install the Anaconda version of virtualenv like this:
    #    conda install virtualenv
    #
    # See here for more info and for directions for how to do this under windows:
    #    https://deparkes.co.uk/2018/06/04/use-tox-with-anaconda/
    if [ -n "$ZSH_VERSION" ]; then
        unsetopt nomatch
    fi
    GBP_CONDA_SCRIPTS_PATH=$GBP_HOME/bin/anaconda
    if [ ! -d $GBP_CONDA_SCRIPTS_PATH ];then
        mkdir $GBP_CONDA_SCRIPTS_PATH
    fi
    if [ -d $GBP_CONDA_PATH/envs ]; then
        export GBP_CONDA_ENVS_PATH=$GBP_CONDA_PATH/envs
        GBP_CONDA_ENVS_PATH_LIST=`find $GBP_CONDA_ENVS_PATH/python?.?/bin -name "python?.?" 2> /dev/null`
    fi
    if [ -z "$GBP_CONDA_ENVS_PATH_LIST" ]; then
        export GBP_CONDA_ENVS_PATH=${GBP_HOME}/.conda/envs
        GBP_CONDA_ENVS_PATH_LIST=`find $GBP_CONDA_ENVS_PATH/python?.?/bin -name "python?.?" 2> /dev/null`
    fi
    if [ -z "$GBP_CONDA_ENVS_PATH_LIST" ]; then
        unset GBP_CONDA_ENVS_PATH
    else
        # For some reason, I need to redo the find because it doesn't iterate over items if I use $GBP_CONDA_ENVS_PATH_LIST
        for path_i in `find $GBP_CONDA_ENVS_PATH/python?.?/bin -name "python?.?"`; do
            version_i=`basename $path_i`
            exec_i=$GBP_CONDA_SCRIPTS_PATH/$version_i
            if [ ! -x $exec_i ]; then
                echo "#!/bin/bash" > $exec_i
                echo $path_i '"$@"' >> $exec_i
                chmod uo+x $exec_i
            fi
        done
    fi
    add2path -q $GBP_CONDA_SCRIPTS_PATH
    if [ -n "$ZSH_VERSION" ]; then
        setopt nomatch
    fi
fi

# macOS specific
if [ $GBP_OS = 'Mac' ]; then

    # /etc/zprofile is loaded and invokes
    # /usr/libexec/path_helper that might slow down start-up.
    # Better enter directly the content of /etc/paths.d here

    # /etc/paths.d/40-XQuartz
    add2path -b -q /opt/X11/bin

    # /etc/paths.d/MacGPG2
    add2path -b -q /usr/local/MacGPG2/bin

    # GNU Core Utils
    # brew info coreutils
    # Add this to the end to prevent the following error when
    # calling 'stty -g' in the autoloaded functions
    #add2path -b -q /usr/local/opt/coreutils/libexec/gnubin
fi
