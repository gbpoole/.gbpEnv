# vim:syntax=sh
# vim:filetype=sh

# Report the script's syntax
usage () {
    echo "Usage: "$(basename $0)" -n <n_cores_per_node> -N <n_nodes> [-s -h -p -k -f <filename>] COMMAND"
}

# Set defaults
keep=false
run_script=true
print_script=false
filename_script=$(mktemp slurm.XXXXXXXXX.sh)
N_NODES=1
N_CORES_PER_NODE=1
WALLCLOCK="1m"
MEM="1G"

# Parse options
n_required=2
n_required_found=0
while getopts ":n:N:f:t:m:shpk" opt; do
  case $opt in
    n)
        N_CORES_PER_NODE=$OPTARG
        let n_required_found=n_required_found+1
        ;;
    N)
        N_NODES=$OPTARG
        let n_required_found=n_required_found+1
        ;;
    t)
        WALLCLOCK=$OPTARG
        ;;
    m)
        MEM=$OPTARG
        ;;
    h)
        usage
        return 0
        ;;
    f)
        filename_script=$OPTARG
        keep=true
        ;;
    s)
        run_script=false
        ;;
    p)
        print_script=true
        ;;
    k)
        keep=true
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        return 1
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        return 1
        ;;
  esac
done

# Check that all required options have been specified
let n_required_missing=n_required-n_required_found
if [[ $n_required_missing -ne 0 ]]; then
    if [[ $n_required_missing -eq 1 ]]; then
        plural_text=" is "
    else
        plural_text="s are "
    fi
    echo $n_required_missing" required option"$plural_text"missing."
    echo
    usage
    return 1
fi

# Parse the command string to be run
COMMAND="${@:$OPTIND}"
if [[ -z "$COMMAND" ]]; then
    echo "Command not defined."
    return 1
fi

# Take the job name from the filename
JOB_NAME="$(basename -s .sh $filename_script)"

# Generate script
echo "#!/bin/bash" > ${filename_script}
echo "#SBATCH -N "$N_NODES" -n "$N_CORES_PER_NODE >> ${filename_script}
echo "#SBATCH -J "$JOB_NAME >> ${filename_script}
echo "#SBATCH -e "$JOB_NAME".err" >> ${filename_script}
echo "#SBATCH -o "$JOB_NAME".out" >> ${filename_script}
echo "#SBATCH --time="$WALLCLOCK >> ${filename_script}
echo "#SBATCH --mem="$MEM >> ${filename_script}
echo "#SBATCH --export=NONE" >> ${filename_script}
echo >> ${filename_script}

echo "# Setup system environment" >> ${filename_script}
# This is needed because the SLURM manager does not pass this to the script
echo "export GBP_HOME=$GBP_HOME"  >> ${filename_script}
echo "source \${GBP_HOME}/.bashrc" >> ${filename_script}
echo >> ${filename_script}

echo "# Setup project environment" >> ${filename_script}
echo "source \${GBP_HOME}/projects/ADACS/ellert/init.sh" >> ${filename_script}
echo >> ${filename_script}

echo "# Run command" >> ${filename_script}
echo $COMMAND >> ${filename_script}

# Set executable permissions for the script (needed by Slurm, for example)
chmod a+x $filename_script

# Optionally print script to screen and run script
if [[ "$print_script" = "true" ]]; then 
    echo "======== SCRIPT CONTENT =========="
    cat $filename_script
    echo "=================================="
    if [[ "$run_script" != "false" ]]; then
        gbp_user_validate "Submit script"
        if [[ $? -ne 0 ]] ; then
            gbp_run_batch $filename_script
            return 0
        fi
    fi
else
    if [[ "$run_script" = "true" ]]; then
        gbp_run_batch $filename_script
    fi
fi

# Optionally keep script
if [[ "$keep" = "false" ]]; then
    rm ${filename_script}
fi
